import re
from collections import Counter
from tabulate import tabulate
import matplotlib.pyplot as plt
import numpy as np

# === –ó—á–∏—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ –æ—á–∏—â–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É ===
with open("text.txt", "r", encoding="utf-8") as src:
    content = src.read().lower()

# –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–µ–∫—Å—Ç—É
content = content.replace("—ë", "–µ")
filtered_text = re.sub(r"[^–∞-—è]", "", content)

# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
with open("prepared_text.txt", "w", encoding="utf-8") as out:
    out.write(filtered_text)
print("‚úÖ –û—á–∏—â–µ–Ω–∏–π —Ç–µ–∫—Å—Ç –∑–∞–ø–∏—Å–∞–Ω–æ —É prepared_text.txt")

# === –ê–ª—Ñ–∞–≤—ñ—Ç ===
letters = "–∞–±–≤–≥–¥–µ–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è"
n_letters = len(letters)

# === –§—É–Ω–∫—Ü—ñ—è –æ—á–∏—â–µ–Ω–Ω—è –∫–ª—é—á–∞ ===
def normalize_key(key_phrase):
    return "".join(ch for ch in key_phrase if ch in letters)

# === –§—É–Ω–∫—Ü—ñ—è —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è –í—ñ–∂–µ–Ω–µ—Ä–∞ ===
def cipher_vigenere(data, key):
    key = normalize_key(key)
    char_to_num = {ch: i for i, ch in enumerate(letters)}
    num_to_char = {i: ch for i, ch in enumerate(letters)}

    encoded = []
    for i, sym in enumerate(data):
        key_shift = char_to_num[key[i % len(key)]]
        encoded_char = num_to_char[(char_to_num[sym] + key_shift) % n_letters]
        encoded.append(encoded_char)
    return "".join(encoded)

# === –Ü–Ω–¥–µ–∫—Å –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ ===
def coincidence_ratio(sequence):
    n = len(sequence)
    freq = Counter(sequence)
    return sum(f * (f - 1) for f in freq.values()) / (n * (n - 1))

# === –ù–∞–±—ñ—Ä –∫–ª—é—á—ñ–≤ ===
key_variants = [ "–¥–∞", "—Ä–æ—Ç",
    "–ª—É–Ω–∞", "–≤–æ–¥–∞", "–º–µ—á—Ç–∞", "–∑–≤–µ–∑–¥–∞", "—Å–æ–ª–Ω—Ü–µ—Å–≤–µ—Ç", "—Å–∫–∞–∑–æ—á–Ω—ã–π–∫–ª—é—á",
    "–≤–µ—á–µ—Ä–Ω–∏–µ—Å–ª–æ–≤–∞", "—Ç–∞–π–Ω–∞–≥–ª—É–±–∏–Ω—ã", "–º–µ–ª–æ–¥–∏—è–≤–µ—Ç—Ä–∞", "–Ω–µ–±–µ—Å–Ω—ã–π–ø—É—Ç—å",
    "–∫—Ä–∞—Å–æ—Ç–∞–Ω–æ—á–∏", "–ø–æ—ç–∑–∏—è–≤–µ—á–Ω–æ—Å—Ç–∏", "–≤–æ–ª—à–µ–±–Ω—ã–π–º–∏—Ä–æ–∫",
    "–∏—Å–∫—Ä–µ–Ω–Ω–µ–µ—Å–µ—Ä–¥—Ü–µ", "–±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ–ª–µ—Ç–æ"
]
key_variants = [normalize_key(k) for k in key_variants]

# === –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —à–∏—Ñ—Ä—Ç–µ–∫—Å—Ç—ñ–≤ ===
print("üîê –®–∏—Ñ—Ä—É—î–º–æ —Ç–µ–∫—Å—Ç–∏ –∑ —Ä—ñ–∑–Ω–∏–º–∏ –∫–ª—é—á–∞–º–∏...")

results = {"–í—ñ–¥–∫—Ä–∏—Ç–∏–π —Ç–µ–∫—Å—Ç": coincidence_ratio(filtered_text)}

with open("all_ciphers.txt", "w", encoding="utf-8") as out:
    for key in key_variants:
        encrypted_text = cipher_vigenere(filtered_text, key)
        out.write(f"=== –ö–ª—é—á: {key} ===\n{encrypted_text}\n\n")
        results[key] = coincidence_ratio(encrypted_text)

print("‚úÖ –£—Å—ñ —à–∏—Ñ—Ä—Ç–µ–∫—Å—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É all_ciphers.txt")

# === –¢–∞–±–ª–∏—Ü—è —ñ–Ω–¥–µ–∫—Å—ñ–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ ===
table_rows = [[k, f"{v:.5f}"] for k, v in results.items()]
formatted = tabulate(table_rows, headers=["–ö–ª—é—á", "–Ü–Ω–¥–µ–∫—Å –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ"], tablefmt="rounded_grid")

with open("indices_table.txt", "w", encoding="utf-8") as f:
    f.write(formatted)
print("‚úÖ –¢–∞–±–ª–∏—Ü—è —ñ–Ω–¥–µ–∫—Å—ñ–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–∞ —É indices_table.txt")

# === –ü–æ–±—É–¥–æ–≤–∞ –¥—ñ–∞–≥—Ä–∞–º–∏ ===
labels = list(results.keys())
values = list(results.values())

plt.figure(figsize=(14, 7))
colors = plt.cm.plasma(np.linspace(0.3, 0.8, len(values)))
bars = plt.bar(range(len(values)), values, color=colors)

plt.xticks(range(len(values)), labels, rotation=45, ha='right', fontsize=10)
plt.ylabel("–Ü–Ω–¥–µ–∫—Å –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ (I)", fontsize=12)
plt.title("–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—ñ–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –∫–ª—é—á—ñ–≤", fontsize=14)
plt.grid(axis='y', linestyle='--', alpha=0.6)

# –ü—ñ–¥–ø–∏—Å–∏ –∑–Ω–∞—á–µ–Ω—å
for bar, val in zip(bars, values):
    plt.text(bar.get_x() + bar.get_width() / 2, val + 0.0005, f"{val:.5f}", ha='center', va='bottom', fontsize=9)

plt.tight_layout()
plt.savefig("indices_plot.png", dpi=300)
plt.close()

print("‚úÖ –î—ñ–∞–≥—Ä–∞–º–∞ —ñ–Ω–¥–µ–∫—Å—ñ–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–∞ —É indices_plot.png")
